{"version":3,"sources":["../../src/types.ts"],"sourcesContent":["import type { Ref, UnwrapRef } from 'vue-demi'\n\ntype Primitive = string | number | boolean | bigint | symbol | undefined | null\ntype UnwrapLeaf =\n  | Primitive\n  | Function\n  | Date\n  | Error\n  | RegExp\n  | Map<any, any>\n  | WeakMap<any, any>\n  | Set<any>\n  | WeakSet<any>\n\nexport type MaybeRef<T> = Ref<T> | T\n\nexport type MaybeRefOrGetter<T> = MaybeRef<T> | (() => T)\n\nexport type MaybeRefDeep<T> = MaybeRef<\n  T extends Function\n    ? T\n    : T extends object\n      ? {\n          [Property in keyof T]: MaybeRefDeep<T[Property]>\n        }\n      : T\n>\n\nexport type NoUnknown<T> = Equal<unknown, T> extends true ? never : T\n\nexport type Equal<TTargetA, TTargetB> = (<T>() => T extends TTargetA\n  ? 1\n  : 2) extends <T>() => T extends TTargetB ? 1 : 2\n  ? true\n  : false\n\nexport type DeepUnwrapRef<T> = T extends UnwrapLeaf\n  ? T\n  : T extends Ref<infer U>\n    ? DeepUnwrapRef<U>\n    : T extends {}\n      ? {\n          [Property in keyof T]: DeepUnwrapRef<T[Property]>\n        }\n      : UnwrapRef<T>\n\nexport type DistributiveOmit<T, TKeyOfAny extends keyof any> = T extends any\n  ? Omit<T, TKeyOfAny>\n  : never\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}