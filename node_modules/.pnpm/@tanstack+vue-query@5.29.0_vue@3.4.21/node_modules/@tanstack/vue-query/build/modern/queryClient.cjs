"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/queryClient.ts
var queryClient_exports = {};
__export(queryClient_exports, {
  QueryClient: () => QueryClient
});
module.exports = __toCommonJS(queryClient_exports);
var import_vue_demi = require("vue-demi");
var import_query_core = require("@tanstack/query-core");
var import_utils = require("./utils.cjs");
var import_queryCache = require("./queryCache.cjs");
var import_mutationCache = require("./mutationCache.cjs");
var QueryClient = class extends import_query_core.QueryClient {
  constructor(config = {}) {
    const vueQueryConfig = {
      defaultOptions: config.defaultOptions,
      queryCache: config.queryCache || new import_queryCache.QueryCache(),
      mutationCache: config.mutationCache || new import_mutationCache.MutationCache()
    };
    super(vueQueryConfig);
    this.isRestoring = (0, import_vue_demi.ref)(false);
  }
  isFetching(filters = {}) {
    return super.isFetching((0, import_utils.cloneDeepUnref)(filters));
  }
  isMutating(filters = {}) {
    return super.isMutating((0, import_utils.cloneDeepUnref)(filters));
  }
  getQueryData(queryKey) {
    return super.getQueryData((0, import_utils.cloneDeepUnref)(queryKey));
  }
  ensureQueryData(options) {
    return super.ensureQueryData((0, import_utils.cloneDeepUnref)(options));
  }
  getQueriesData(filters) {
    return super.getQueriesData((0, import_utils.cloneDeepUnref)(filters));
  }
  setQueryData(queryKey, updater, options = {}) {
    return super.setQueryData(
      (0, import_utils.cloneDeepUnref)(queryKey),
      updater,
      (0, import_utils.cloneDeepUnref)(options)
    );
  }
  setQueriesData(filters, updater, options = {}) {
    return super.setQueriesData(
      (0, import_utils.cloneDeepUnref)(filters),
      updater,
      (0, import_utils.cloneDeepUnref)(options)
    );
  }
  getQueryState(queryKey) {
    return super.getQueryState((0, import_utils.cloneDeepUnref)(queryKey));
  }
  removeQueries(filters = {}) {
    return super.removeQueries((0, import_utils.cloneDeepUnref)(filters));
  }
  resetQueries(filters = {}, options = {}) {
    return super.resetQueries((0, import_utils.cloneDeepUnref)(filters), (0, import_utils.cloneDeepUnref)(options));
  }
  cancelQueries(filters = {}, options = {}) {
    return super.cancelQueries((0, import_utils.cloneDeepUnref)(filters), (0, import_utils.cloneDeepUnref)(options));
  }
  invalidateQueries(filters = {}, options = {}) {
    return new Promise((resolve) => {
      setTimeout(async () => {
        await super.invalidateQueries(
          (0, import_utils.cloneDeepUnref)(filters),
          (0, import_utils.cloneDeepUnref)(options)
        );
        resolve();
      }, 0);
    });
  }
  refetchQueries(filters = {}, options = {}) {
    return super.refetchQueries(
      (0, import_utils.cloneDeepUnref)(filters),
      (0, import_utils.cloneDeepUnref)(options)
    );
  }
  fetchQuery(options) {
    return super.fetchQuery((0, import_utils.cloneDeepUnref)(options));
  }
  prefetchQuery(options) {
    return super.prefetchQuery((0, import_utils.cloneDeepUnref)(options));
  }
  fetchInfiniteQuery(options) {
    return super.fetchInfiniteQuery((0, import_utils.cloneDeepUnref)(options));
  }
  prefetchInfiniteQuery(options) {
    return super.prefetchInfiniteQuery((0, import_utils.cloneDeepUnref)(options));
  }
  setDefaultOptions(options) {
    super.setDefaultOptions((0, import_utils.cloneDeepUnref)(options));
  }
  setQueryDefaults(queryKey, options) {
    super.setQueryDefaults((0, import_utils.cloneDeepUnref)(queryKey), (0, import_utils.cloneDeepUnref)(options));
  }
  getQueryDefaults(queryKey) {
    return super.getQueryDefaults((0, import_utils.cloneDeepUnref)(queryKey));
  }
  setMutationDefaults(mutationKey, options) {
    super.setMutationDefaults(
      (0, import_utils.cloneDeepUnref)(mutationKey),
      (0, import_utils.cloneDeepUnref)(options)
    );
  }
  getMutationDefaults(mutationKey) {
    return super.getMutationDefaults((0, import_utils.cloneDeepUnref)(mutationKey));
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  QueryClient
});
//# sourceMappingURL=queryClient.cjs.map