"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/useQueries.ts
var useQueries_exports = {};
__export(useQueries_exports, {
  useQueries: () => useQueries
});
module.exports = __toCommonJS(useQueries_exports);
var import_query_core = require("@tanstack/query-core");
var import_vue_demi = require("vue-demi");
var import_useQueryClient = require("./useQueryClient.cjs");
var import_utils = require("./utils.cjs");
function useQueries({
  queries,
  ...options
}, queryClient) {
  if (process.env.NODE_ENV === "development") {
    if (!(0, import_vue_demi.getCurrentScope)()) {
      console.warn(
        'vue-query composable like "useQuery()" should only be used inside a "setup()" function or a running effect scope. They might otherwise lead to memory leaks.'
      );
    }
  }
  const client = queryClient || (0, import_useQueryClient.useQueryClient)();
  const defaultedQueries = (0, import_vue_demi.computed)(
    () => (0, import_utils.cloneDeepUnref)(queries).map(
      (queryOptions) => {
        if (typeof queryOptions.enabled === "function") {
          queryOptions.enabled = queryOptions.enabled();
        }
        const defaulted = client.defaultQueryOptions(queryOptions);
        defaulted._optimisticResults = client.isRestoring.value ? "isRestoring" : "optimistic";
        return defaulted;
      }
    )
  );
  const observer = new import_query_core.QueriesObserver(
    client,
    defaultedQueries.value,
    options
  );
  const [, getCombinedResult] = observer.getOptimisticResult(
    defaultedQueries.value,
    options.combine
  );
  const state = (0, import_vue_demi.shallowRef)(getCombinedResult());
  let unsubscribe = () => {
  };
  (0, import_vue_demi.watch)(
    client.isRestoring,
    (isRestoring) => {
      if (!isRestoring) {
        unsubscribe();
        unsubscribe = observer.subscribe(() => {
          const [, getCombinedResultRestoring] = observer.getOptimisticResult(
            defaultedQueries.value,
            options.combine
          );
          state.value = getCombinedResultRestoring();
        });
        const [, getCombinedResultPersisted] = observer.getOptimisticResult(
          defaultedQueries.value,
          options.combine
        );
        state.value = getCombinedResultPersisted();
      }
    },
    { immediate: true }
  );
  (0, import_vue_demi.watch)(
    defaultedQueries,
    () => {
      observer.setQueries(
        defaultedQueries.value,
        options
      );
      const [, getCombinedResultPersisted] = observer.getOptimisticResult(
        defaultedQueries.value,
        options.combine
      );
      state.value = getCombinedResultPersisted();
    },
    { flush: "sync" }
  );
  (0, import_vue_demi.onScopeDispose)(() => {
    unsubscribe();
  });
  return (0, import_vue_demi.readonly)(state);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useQueries
});
//# sourceMappingURL=useQueries.cjs.map